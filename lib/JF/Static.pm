#-------------------------------------------
# Full documentation should be available
# at the command line via perldoc.  Please
# report any errors or omissions to the
# author.  Thank you.  And have a nice day.
#-------------------------------------------
package  JF::Static;
use strict;
use warnings;
use JF::Template;
use Apache2::Const qw( NOT_FOUND FORBIDDEN OK );
use Apache2::Log;
use Apache2::RequestRec; # for $r->filename;
use Carp;

my $TEMPLATE_DIR;

#-------------------------------------------
# this just takes care of includes & template set variables
#-------------------------------------------
sub handler {

    my $r = shift;
    my $filename = $r->filename;

    if (not -e $filename) {
	Apache2::ServerRec::warn("File Not Found: $filename");
	return NOT_FOUND;
    }

    if (not -r $filename) {
	Apache2::ServerRec::warn("Forbidden: $filename");
	return FORBIDDEN;
    }

    my $t = JF::Template->new;
    my $tdir = ($TEMPLATE_DIR || $ENV{JF_STATIC_TEMPLATE_DIR}) || die(
	"You must set TEMPLATE_DIR in httpd.conf " .
	"with PerlSetEnv or call JF::Static->template_dir"
    );
    $t->set_dir( $tdir );

    # this is so another module can render stuff to the template
    # if needed, without having to copy this whole module. 
    my $callback_class = $ENV{JF_STATIC_TEMPLATE_CALLBACK_CLASS} || "";
    if ($callback_class) {
	# you should make sure that the module with the
	# callback is required at server startup (you should
	# do that with all modules anyways)
	$callback_class->jf_static_template_callback($t);
    }

    eval {
        $r->content_type("text/html");
        print( $t->parse_file($filename) );
    };
    if ($@) {
        warn "JF::Static::handler() failed for '$tdir' and '$filename'\n";
    }

    return OK;

}

sub template_dir {
    my $class = shift;
    carp("Who uses this?");
    if (@_) {
	$TEMPLATE_DIR = shift;
    }
    return $TEMPLATE_DIR;
}

1;

=head1 NAME

JF::Static - a JF::Template compatible static template parser

=head1 SYNOPSIS

in httpd.conf:

  PerlRequire /path/to/libraries/JF/Static.pm
  <FilesMatch "\.html$">
      SetHandler perl-script
      PerlSetEnv TEMPLATE_DIR /path/to/teplate/directory
      PerlHandler JF::Static
  </FilesMatch>

If you don't want to harcode your template dirctory in the conf file,
you can pass it in to the class at server startup by calling
JF::Static->template_dir() from any module loaded in the conf file.

=head1 USAGE

This module will allow you to use the same templates and fragments for
building static HTML pages as for dynamic pages under the JF::Template
system.  When I say "static" I mean pages that aren't generated by a
script.  Usually you'll want to use common bits of HTML between scripts
and static pages by <% include %> ing them.  This module lets you do that.

The way I like to do it is to have one "master.tmpl" that provides the site
framework, with an <% echo $page_title %> for the title and an
<% include $page_htmlf %> for the content.

Then the scripts set $page_title and $page_htmlf via perl and then parses
the master.tmpl file.  For static pages like "index.html" I create a wrapper
like this in the document root:

  <% set "page_title", "Home" %>
  <% set "page_htmlf", "index.htmlf" %>
  <% include "master.tmpl" %>

And that's it.  The master.tmpl contains the site layout, index.htmlf (or
whatever page we're doing it) contains the content, and index.html (the
three lines above) ties it together.

It may be a bit confusing at first, but once you get it you'll never go back :)

=head1 ADVANCED FEATURE

If you want to do some manipulation of the template on "static" pages (an
increasingly inaccurate name in that case) you can.  In the httpd.conf file
you can include:

  PerlModule ME::MyClass
  PerlSetEnv JF_STATIC_TEMPLATE_CALLBACK_CLASS ME::MyClass

And in your class have a sub like this:

  sub jf_static_template_callback {
      my ($class, $t) = @_;
      $t->set_value( you_are_special => 1 );
  }

You can pretty much do whatever you want to the template and it will be
included in the rendering later.

=head1 NOTES

You can choose whatever FilesMatch regex you want - I just do all HTML files,
but if much of your site isn't templated, and you don't want to incur the 
parsing overhead you can name your templated pages with a .thtml extention
or something and FileMatch on that instead.

=head1 BUGS

See the BUGS section in JF::Template

=head1 DEPENDENCIES

JF::Template

=head1 AUTHOR

Jonathan Field - jon@binadopta.com
you are looing good
